var HearthstoneApi = (function () {
    function HearthstoneApi() {
    }
    HearthstoneApi.prototype.searchCard = function (card) {
        var _this = this;
        this.findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards/search/" + card;
        return new Promise(function (resolve, reject) {
            Zone.bindPromiseFn(fetch)(_this.findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    HearthstoneApi.prototype.searchSpec = function (cost, attack, health) {
        var _this = this;
        if (cost === void 0) { cost = 0; }
        if (attack === void 0) { attack = 0; }
        if (health === void 0) { health = 0; }
        this.findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards?";
        if (attack != 0) {
            this.findCard = this.findCard + "&attack=" + attack;
        }
        if (cost != 0) {
            this.findCard = this.findCard + "&cost=" + cost;
        }
        if (health != 0) {
            this.findCard = this.findCard + "&health=" + health;
        }
        return new Promise(function (resolve, reject) {
            Zone.bindPromiseFn(fetch)(_this.findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    return HearthstoneApi;
})();
exports.HearthstoneApi = HearthstoneApi;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2hlYXJ0aHN0b25lQXBpLnRzIl0sIm5hbWVzIjpbIkhlYXJ0aHN0b25lQXBpIiwiSGVhcnRoc3RvbmVBcGkuY29uc3RydWN0b3IiLCJIZWFydGhzdG9uZUFwaS5zZWFyY2hDYXJkIiwiSGVhcnRoc3RvbmVBcGkuc2VhcmNoU3BlYyJdLCJtYXBwaW5ncyI6IkFBRUE7SUFBQUE7SUEwRUFDLENBQUNBO0lBckVBRCxtQ0FBVUEsR0FBVkEsVUFBV0EsSUFBSUE7UUFBZkUsaUJBZ0JDQTtRQWRBQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSw0REFBNERBLEdBQUNBLElBQUlBLENBQUNBO1FBQ2pGQSxNQUFNQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQSxFQUFFQSxNQUFNQTtZQUMvQkEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsS0FBSUEsQ0FBQ0EsUUFBUUEsRUFBRUE7Z0JBQ3ZDQSxPQUFPQSxFQUFDQTtvQkFDUEEsZUFBZUEsRUFBRUEsb0RBQW9EQTtpQkFDckVBO2FBQ0pBLENBQUNBO2lCQUNFQSxJQUFJQSxDQUFDQSxVQUFBQSxRQUFRQSxJQUFJQSxPQUFBQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxFQUFmQSxDQUFlQSxDQUFDQTtpQkFDakNBLElBQUlBLENBQUNBLFVBQUFBLFFBQVFBO2dCQUNaQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUNwQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7Z0JBQ1BBLE1BQU1BLEVBQUVBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBO1FBQ0xBLENBQUNBLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0lBRURGLG1DQUFVQSxHQUFWQSxVQUFXQSxJQUFRQSxFQUFFQSxNQUFVQSxFQUFFQSxNQUFVQTtRQUEzQ0csaUJBMEJDQTtRQTFCVUEsb0JBQVFBLEdBQVJBLFFBQVFBO1FBQUVBLHNCQUFVQSxHQUFWQSxVQUFVQTtRQUFFQSxzQkFBVUEsR0FBVkEsVUFBVUE7UUFDMUNBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLHFEQUFxREEsQ0FBQUE7UUFDckVBLEVBQUVBLENBQUFBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO1lBQ2ZBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLEdBQUNBLFVBQVVBLEdBQUNBLE1BQU1BLENBQUNBO1FBQ2pEQSxDQUFDQTtRQUNEQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtZQUNiQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFDQSxRQUFRQSxHQUFDQSxJQUFJQSxDQUFDQTtRQUM3Q0EsQ0FBQ0E7UUFDREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsTUFBTUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7WUFDZkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBQ0EsVUFBVUEsR0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDakRBLENBQUNBO1FBRUFBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQUNBLE9BQU9BLEVBQUVBLE1BQU1BO1lBQy9CQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxLQUFJQSxDQUFDQSxRQUFRQSxFQUFFQTtnQkFDdkNBLE9BQU9BLEVBQUNBO29CQUNQQSxlQUFlQSxFQUFFQSxvREFBb0RBO2lCQUNyRUE7YUFDSkEsQ0FBQ0E7aUJBQ0VBLElBQUlBLENBQUNBLFVBQUFBLFFBQVFBLElBQUlBLE9BQUFBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLEVBQWZBLENBQWVBLENBQUNBO2lCQUNqQ0EsSUFBSUEsQ0FBQ0EsVUFBQUEsUUFBUUE7Z0JBQ1pBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQ3BCQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQTtnQkFDUEEsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFDWkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDTEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFUEEsQ0FBQ0E7SUF5QkZILHFCQUFDQTtBQUFEQSxDQTFFQSxBQTBFQ0EsSUFBQTtBQTFFWSxzQkFBYyxpQkEwRTFCLENBQUEiLCJmaWxlIjoic2VydmljZXMvaGVhcnRoc3RvbmVBcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJkZWNsYXJlIHZhciBmZXRjaCwgWm9uZTtcblxuZXhwb3J0IGNsYXNzIEhlYXJ0aHN0b25lQXBpIHtcblxuXHRmaW5kQ2FyZDogU3RyaW5nO1xuXHRmaW5kRGVjazogU3RyaW5nO1xuXG5cdHNlYXJjaENhcmQoY2FyZCl7XG5cblx0XHR0aGlzLmZpbmRDYXJkID0gXCJodHRwczovL29tZ3ZhbXAtaGVhcnRoc3RvbmUtdjEucC5tYXNoYXBlLmNvbS9jYXJkcy9zZWFyY2gvXCIrY2FyZDtcblx0IFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgXHRcdFpvbmUuYmluZFByb21pc2VGbihmZXRjaCkodGhpcy5maW5kQ2FyZCwge1xuXHQgICAgICBcdFx0aGVhZGVyczp7XG5cdCAgICAgIFx0XHRcdFwiWC1NYXNoYXBlLUtleVwiOiBcIm9qT1RJZ0p3QUdtc2hSS0FsOU1UNGJ0OTRuR3JwMUJsVWo1anNubFlSNU5EbU4yRzZxXCJcblx0ICAgICAgXHRcdH1cbiBcdCBcdFx0fSlcbiAgICAgIFx0XHQudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICBcdFx0LnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICBcdFx0cmVzb2x2ZShyZXNwb25zZSk7IC8vIHJlc29sdmUgcHJvbWlzZSB3aXRoIHJlc3BvbnNlIGlmIGl0IGZldGNoIHN1Y2NlZGVkXG4gICAgICBcdFx0fSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICBcdFx0cmVqZWN0KCk7IC8vIHJlamVjdCBwcm9taXNlIGlmIHdlIGNhdGNoIGEgZmV0Y2ggZXJyb3JcbiAgICAgXHRcdH0pO1xuICAgIFx0fSk7XG5cdH1cblxuXHRzZWFyY2hTcGVjKGNvc3QgPSAwLCBhdHRhY2sgPSAwLCBoZWFsdGggPSAwKXtcblx0XHR0aGlzLmZpbmRDYXJkID0gXCJodHRwczovL29tZ3ZhbXAtaGVhcnRoc3RvbmUtdjEucC5tYXNoYXBlLmNvbS9jYXJkcz9cIlxuXHRcdGlmKGF0dGFjayAhPSAwKXtcblx0XHRcdHRoaXMuZmluZENhcmQgPSB0aGlzLmZpbmRDYXJkK1wiJmF0dGFjaz1cIithdHRhY2s7XG5cdFx0fVxuXHRcdGlmKGNvc3QgIT0gMCl7XG5cdFx0XHR0aGlzLmZpbmRDYXJkID0gdGhpcy5maW5kQ2FyZCtcIiZjb3N0PVwiK2Nvc3Q7XG5cdFx0fVxuXHRcdGlmKGhlYWx0aCAhPSAwKXtcblx0XHRcdHRoaXMuZmluZENhcmQgPSB0aGlzLmZpbmRDYXJkK1wiJmhlYWx0aD1cIitoZWFsdGg7XG5cdFx0fVxuXG5cdCBcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgIFx0XHRab25lLmJpbmRQcm9taXNlRm4oZmV0Y2gpKHRoaXMuZmluZENhcmQsIHtcblx0ICAgICAgXHRcdGhlYWRlcnM6e1xuXHQgICAgICBcdFx0XHRcIlgtTWFzaGFwZS1LZXlcIjogXCJvak9USWdKd0FHbXNoUktBbDlNVDRidDk0bkdycDFCbFVqNWpzbmxZUjVORG1OMkc2cVwiXG5cdCAgICAgIFx0XHR9XG4gXHQgXHRcdH0pXG4gICAgICBcdFx0LnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgXHRcdC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgXHRcdHJlc29sdmUocmVzcG9uc2UpOyAvLyByZXNvbHZlIHByb21pc2Ugd2l0aCByZXNwb25zZSBpZiBpdCBmZXRjaCBzdWNjZWRlZFxuICAgICAgXHRcdH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgXHRcdHJlamVjdCgpOyAvLyByZWplY3QgcHJvbWlzZSBpZiB3ZSBjYXRjaCBhIGZldGNoIGVycm9yXG4gICAgIFx0XHR9KTtcbiAgICBcdH0pO1xuXHRcdFxuXHR9XG5cblx0Ly8gUmFuZG9tU2V0KGhlcm9pY0NsYXNzKXtcblxuXG5cdC8vIFx0ZmluZERlY2sgPSBcImh0dHBzOi8vb21ndmFtcC1oZWFydGhzdG9uZS12MS5wLm1hc2hhcGUuY29tL2NhcmRzL2NsYXNzZXMvXCIre2hlcm9pY0NsYXNzfTtcblx0Ly8gXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuIC8vICAgICBcdFx0ZmV0Y2goZmluZERlY2ssIHtcblx0Ly8gICAgICAgXHRcdGhlYWRlcnM6e1xuXHQvLyAgICAgICBcdFx0XHRcIlgtTWFzaGFwZS1LZXlcIjogXCJvak9USWdKd0FHbXNoUktBbDlNVDRidDk0bkdycDFCbFVqNWpzbmxZUjVORG1OMkc2cVwiXG5cdC8vICAgICAgIFx0XHR9XG4gLy8gXHQgXHRcdH0pXG4gLy8gICAgICBcdFx0LnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuIC8vICAgICAgXHRcdC50aGVuKHJlc3BvbnNlID0+IHtcbiAvLyAgICAgICAgXHRcdHJlc29sdmUocmVzcG9uc2UpOyAvLyByZXNvbHZlIHByb21pc2Ugd2l0aCByZXNwb25zZSBpZiBpdCBmZXRjaCBzdWNjZWRlZFxuIC8vICAgICAgICBcdFx0Y29uc29sZS5sb2coJ2Zyb20gYmFjaycrcmVzcG9uc2UpO1xuIC8vICAgICAgICBcdFx0Y29uc29sZS5sb2cocmVzcG9uc2UpO1xuIC8vICAgICAgXHRcdH0pLmNhdGNoKCgpID0+IHtcbiAvLyAgICAgICAgXHRcdHJlamVjdCgpOyAvLyByZWplY3QgcHJvbWlzZSBpZiB3ZSBjYXRjaCBhIGZldGNoIGVycm9yXG4gLy8gICAgIFx0XHR9KTtcbiAvLyAgICBcdH0pO1xuXG5cblx0Ly8gfVxuXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9