var HearthstoneApi = (function () {
    function HearthstoneApi() {
    }
    HearthstoneApi.prototype.searchCard = function (card) {
        findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards/search/" + card;
        return new Promise(function (resolve, reject) {
            fetch(findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    HearthstoneApi.prototype.searchSpec = function (cost, attack, health) {
        if (cost === void 0) { cost = 0; }
        if (attack === void 0) { attack = 0; }
        if (health === void 0) { health = 0; }
        findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards?";
        if (attack != 0) {
            findCard = findCard + "&attack=" + attack;
        }
        if (cost != 0) {
            findCard = findCard + "&cost=" + cost;
        }
        if (health != 0) {
            findCard = findCard + "&health=" + health;
        }
        return new Promise(function (resolve, reject) {
            fetch(findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    return HearthstoneApi;
})();
exports.HearthstoneApi = HearthstoneApi;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2hlYXJ0aHN0b25lQXBpLnRzIl0sIm5hbWVzIjpbIkhlYXJ0aHN0b25lQXBpIiwiSGVhcnRoc3RvbmVBcGkuY29uc3RydWN0b3IiLCJIZWFydGhzdG9uZUFwaS5zZWFyY2hDYXJkIiwiSGVhcnRoc3RvbmVBcGkuc2VhcmNoU3BlYyJdLCJtYXBwaW5ncyI6IkFBQUE7SUFBQUE7SUEwRUFDLENBQUNBO0lBckVBRCxtQ0FBVUEsR0FBVkEsVUFBV0EsSUFBSUE7UUFFZEUsUUFBUUEsR0FBR0EsNERBQTREQSxHQUFDQSxJQUFJQSxDQUFDQTtRQUM1RUEsTUFBTUEsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBQ0EsVUFBQ0EsT0FBT0EsRUFBRUEsTUFBTUE7WUFDL0JBLEtBQUtBLENBQUNBLFFBQVFBLEVBQUVBO2dCQUNkQSxPQUFPQSxFQUFDQTtvQkFDUEEsZUFBZUEsRUFBRUEsb0RBQW9EQTtpQkFDckVBO2FBQ0pBLENBQUNBO2lCQUNFQSxJQUFJQSxDQUFDQSxVQUFBQSxRQUFRQSxJQUFJQSxPQUFBQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxFQUFmQSxDQUFlQSxDQUFDQTtpQkFDakNBLElBQUlBLENBQUNBLFVBQUFBLFFBQVFBO2dCQUNaQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUNwQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7Z0JBQ1BBLE1BQU1BLEVBQUVBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBO1FBQ0xBLENBQUNBLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0lBRURGLG1DQUFVQSxHQUFWQSxVQUFXQSxJQUFRQSxFQUFFQSxNQUFVQSxFQUFFQSxNQUFVQTtRQUFoQ0csb0JBQVFBLEdBQVJBLFFBQVFBO1FBQUVBLHNCQUFVQSxHQUFWQSxVQUFVQTtRQUFFQSxzQkFBVUEsR0FBVkEsVUFBVUE7UUFDMUNBLFFBQVFBLEdBQUdBLHFEQUFxREEsQ0FBQUE7UUFDaEVBLEVBQUVBLENBQUFBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBLENBQUFBLENBQUNBO1lBQ2ZBLFFBQVFBLEdBQUdBLFFBQVFBLEdBQUNBLFVBQVVBLEdBQUNBLE1BQU1BLENBQUNBO1FBQ3ZDQSxDQUFDQTtRQUNEQSxFQUFFQSxDQUFBQSxDQUFDQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFBQSxDQUFDQTtZQUNiQSxRQUFRQSxHQUFHQSxRQUFRQSxHQUFDQSxRQUFRQSxHQUFDQSxJQUFJQSxDQUFDQTtRQUNuQ0EsQ0FBQ0E7UUFDREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsTUFBTUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQUEsQ0FBQ0E7WUFDZkEsUUFBUUEsR0FBR0EsUUFBUUEsR0FBQ0EsVUFBVUEsR0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDdkNBLENBQUNBO1FBRUFBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQUNBLE9BQU9BLEVBQUVBLE1BQU1BO1lBQy9CQSxLQUFLQSxDQUFDQSxRQUFRQSxFQUFFQTtnQkFDZEEsT0FBT0EsRUFBQ0E7b0JBQ1BBLGVBQWVBLEVBQUVBLG9EQUFvREE7aUJBQ3JFQTthQUNKQSxDQUFDQTtpQkFDRUEsSUFBSUEsQ0FBQ0EsVUFBQUEsUUFBUUEsSUFBSUEsT0FBQUEsUUFBUUEsQ0FBQ0EsSUFBSUEsRUFBRUEsRUFBZkEsQ0FBZUEsQ0FBQ0E7aUJBQ2pDQSxJQUFJQSxDQUFDQSxVQUFBQSxRQUFRQTtnQkFDWkEsT0FBT0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7WUFDcEJBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBO2dCQUNQQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUNaQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNMQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUVQQSxDQUFDQTtJQXlCRkgscUJBQUNBO0FBQURBLENBMUVBLEFBMEVDQSxJQUFBO0FBMUVZLHNCQUFjLGlCQTBFMUIsQ0FBQSIsImZpbGUiOiJzZXJ2aWNlcy9oZWFydGhzdG9uZUFwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBIZWFydGhzdG9uZUFwaSB7XG5cblx0ZmluZENhcmQ6IFN0cmluZztcblx0ZmluZERlY2s6IFN0cmluZztcblxuXHRzZWFyY2hDYXJkKGNhcmQpe1xuXG5cdFx0ZmluZENhcmQgPSBcImh0dHBzOi8vb21ndmFtcC1oZWFydGhzdG9uZS12MS5wLm1hc2hhcGUuY29tL2NhcmRzL3NlYXJjaC9cIitjYXJkO1xuXHQgXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICBcdFx0ZmV0Y2goZmluZENhcmQsIHtcblx0ICAgICAgXHRcdGhlYWRlcnM6e1xuXHQgICAgICBcdFx0XHRcIlgtTWFzaGFwZS1LZXlcIjogXCJvak9USWdKd0FHbXNoUktBbDlNVDRidDk0bkdycDFCbFVqNWpzbmxZUjVORG1OMkc2cVwiXG5cdCAgICAgIFx0XHR9XG4gXHQgXHRcdH0pXG4gICAgICBcdFx0LnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgXHRcdC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgXHRcdHJlc29sdmUocmVzcG9uc2UpOyAvLyByZXNvbHZlIHByb21pc2Ugd2l0aCByZXNwb25zZSBpZiBpdCBmZXRjaCBzdWNjZWRlZFxuICAgICAgXHRcdH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgXHRcdHJlamVjdCgpOyAvLyByZWplY3QgcHJvbWlzZSBpZiB3ZSBjYXRjaCBhIGZldGNoIGVycm9yXG4gICAgIFx0XHR9KTtcbiAgICBcdH0pO1xuXHR9XG5cblx0c2VhcmNoU3BlYyhjb3N0ID0gMCwgYXR0YWNrID0gMCwgaGVhbHRoID0gMCl7XG5cdFx0ZmluZENhcmQgPSBcImh0dHBzOi8vb21ndmFtcC1oZWFydGhzdG9uZS12MS5wLm1hc2hhcGUuY29tL2NhcmRzP1wiXG5cdFx0aWYoYXR0YWNrICE9IDApe1xuXHRcdFx0ZmluZENhcmQgPSBmaW5kQ2FyZCtcIiZhdHRhY2s9XCIrYXR0YWNrO1xuXHRcdH1cblx0XHRpZihjb3N0ICE9IDApe1xuXHRcdFx0ZmluZENhcmQgPSBmaW5kQ2FyZCtcIiZjb3N0PVwiK2Nvc3Q7XG5cdFx0fVxuXHRcdGlmKGhlYWx0aCAhPSAwKXtcblx0XHRcdGZpbmRDYXJkID0gZmluZENhcmQrXCImaGVhbHRoPVwiK2hlYWx0aDtcblx0XHR9XG5cblx0IFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgXHRcdGZldGNoKGZpbmRDYXJkLCB7XG5cdCAgICAgIFx0XHRoZWFkZXJzOntcblx0ICAgICAgXHRcdFx0XCJYLU1hc2hhcGUtS2V5XCI6IFwib2pPVElnSndBR21zaFJLQWw5TVQ0YnQ5NG5HcnAxQmxVajVqc25sWVI1TkRtTjJHNnFcIlxuXHQgICAgICBcdFx0fVxuIFx0IFx0XHR9KVxuICAgICAgXHRcdC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIFx0XHQudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIFx0XHRyZXNvbHZlKHJlc3BvbnNlKTsgLy8gcmVzb2x2ZSBwcm9taXNlIHdpdGggcmVzcG9uc2UgaWYgaXQgZmV0Y2ggc3VjY2VkZWRcbiAgICAgIFx0XHR9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIFx0XHRyZWplY3QoKTsgLy8gcmVqZWN0IHByb21pc2UgaWYgd2UgY2F0Y2ggYSBmZXRjaCBlcnJvclxuICAgICBcdFx0fSk7XG4gICAgXHR9KTtcblx0XHRcblx0fVxuXG5cdC8vIFJhbmRvbVNldChoZXJvaWNDbGFzcyl7XG5cblxuXHQvLyBcdGZpbmREZWNrID0gXCJodHRwczovL29tZ3ZhbXAtaGVhcnRoc3RvbmUtdjEucC5tYXNoYXBlLmNvbS9jYXJkcy9jbGFzc2VzL1wiK3toZXJvaWNDbGFzc307XG5cdC8vIFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAvLyAgICAgXHRcdGZldGNoKGZpbmREZWNrLCB7XG5cdC8vICAgICAgIFx0XHRoZWFkZXJzOntcblx0Ly8gICAgICAgXHRcdFx0XCJYLU1hc2hhcGUtS2V5XCI6IFwib2pPVElnSndBR21zaFJLQWw5TVQ0YnQ5NG5HcnAxQmxVajVqc25sWVI1TkRtTjJHNnFcIlxuXHQvLyAgICAgICBcdFx0fVxuIC8vIFx0IFx0XHR9KVxuIC8vICAgICAgXHRcdC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAvLyAgICAgIFx0XHQudGhlbihyZXNwb25zZSA9PiB7XG4gLy8gICAgICAgIFx0XHRyZXNvbHZlKHJlc3BvbnNlKTsgLy8gcmVzb2x2ZSBwcm9taXNlIHdpdGggcmVzcG9uc2UgaWYgaXQgZmV0Y2ggc3VjY2VkZWRcbiAvLyAgICAgICAgXHRcdGNvbnNvbGUubG9nKCdmcm9tIGJhY2snK3Jlc3BvbnNlKTtcbiAvLyAgICAgICAgXHRcdGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAvLyAgICAgIFx0XHR9KS5jYXRjaCgoKSA9PiB7XG4gLy8gICAgICAgIFx0XHRyZWplY3QoKTsgLy8gcmVqZWN0IHByb21pc2UgaWYgd2UgY2F0Y2ggYSBmZXRjaCBlcnJvclxuIC8vICAgICBcdFx0fSk7XG4gLy8gICAgXHR9KTtcblxuXG5cdC8vIH1cblxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==