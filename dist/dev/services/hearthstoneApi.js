var HearthstoneApi = (function () {
    function HearthstoneApi() {
    }
    HearthstoneApi.prototype.serviceCall = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            fetch(_this.findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    HearthstoneApi.prototype.searchCard = function (card) {
        this.findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards/search/" + card;
        return this.serviceCall();
    };
    HearthstoneApi.prototype.searchSpec = function (cost, attack, health) {
        if (cost === void 0) { cost = 0; }
        if (attack === void 0) { attack = 0; }
        if (health === void 0) { health = 0; }
        this.findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards?";
        if (attack != 0) {
            this.findCard = this.findCard + "&attack=" + attack;
        }
        if (cost != 0) {
            this.findCard = this.findCard + "&cost=" + cost;
        }
        if (health != 0) {
            this.findCard = this.findCard + "&health=" + health;
        }
        return this.serviceCall();
    };
    HearthstoneApi.prototype.searchByID = function (id) {
        this.findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards/" + id;
        return this.serviceCall();
    };
    return HearthstoneApi;
})();
exports.HearthstoneApi = HearthstoneApi;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2hlYXJ0aHN0b25lQXBpLnRzIl0sIm5hbWVzIjpbIkhlYXJ0aHN0b25lQXBpIiwiSGVhcnRoc3RvbmVBcGkuY29uc3RydWN0b3IiLCJIZWFydGhzdG9uZUFwaS5zZXJ2aWNlQ2FsbCIsIkhlYXJ0aHN0b25lQXBpLnNlYXJjaENhcmQiLCJIZWFydGhzdG9uZUFwaS5zZWFyY2hTcGVjIiwiSGVhcnRoc3RvbmVBcGkuc2VhcmNoQnlJRCJdLCJtYXBwaW5ncyI6IkFBRUE7SUFBQUE7SUFpRkFDLENBQUNBO0lBM0VBRCxvQ0FBV0EsR0FBWEE7UUFBQUUsaUJBY0dBO1FBYkFBLE1BQU1BLENBQUNBLElBQUlBLE9BQU9BLENBQUNBLFVBQUNBLE9BQU9BLEVBQUVBLE1BQU1BO1lBQzlCQSxLQUFLQSxDQUFDQSxLQUFJQSxDQUFDQSxRQUFRQSxFQUFFQTtnQkFDbkJBLE9BQU9BLEVBQUNBO29CQUNQQSxlQUFlQSxFQUFFQSxvREFBb0RBO2lCQUNyRUE7YUFDSkEsQ0FBQ0E7aUJBQ0VBLElBQUlBLENBQUNBLFVBQUFBLFFBQVFBLElBQUlBLE9BQUFBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLEVBQWZBLENBQWVBLENBQUNBO2lCQUNqQ0EsSUFBSUEsQ0FBQ0EsVUFBQUEsUUFBUUE7Z0JBQ1pBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQ3BCQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQTtnQkFDUEEsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFDWkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDTEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7SUFHSEYsbUNBQVVBLEdBQVZBLFVBQVdBLElBQUlBO1FBRWRHLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLDREQUE0REEsR0FBQ0EsSUFBSUEsQ0FBQ0E7UUFFbEZBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBO0lBQzNCQSxDQUFDQTtJQUdESCxtQ0FBVUEsR0FBVkEsVUFBV0EsSUFBUUEsRUFBRUEsTUFBVUEsRUFBRUEsTUFBVUE7UUFBaENJLG9CQUFRQSxHQUFSQSxRQUFRQTtRQUFFQSxzQkFBVUEsR0FBVkEsVUFBVUE7UUFBRUEsc0JBQVVBLEdBQVZBLFVBQVVBO1FBRTFDQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxxREFBcURBLENBQUNBO1FBQ3RFQSxFQUFFQSxDQUFBQSxDQUFDQSxNQUFNQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUNmQSxDQUFDQTtZQUNBQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFDQSxVQUFVQSxHQUFDQSxNQUFNQSxDQUFDQTtRQUNqREEsQ0FBQ0E7UUFDREEsRUFBRUEsQ0FBQUEsQ0FBQ0EsSUFBSUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FDYkEsQ0FBQ0E7WUFDQUEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBQ0EsUUFBUUEsR0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDN0NBLENBQUNBO1FBQ0RBLEVBQUVBLENBQUFBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBLENBQ2ZBLENBQUNBO1lBQ0FBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLEdBQUNBLFVBQVVBLEdBQUNBLE1BQU1BLENBQUNBO1FBQ2pEQSxDQUFDQTtRQUVEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQTtJQUMzQkEsQ0FBQ0E7SUFHREosbUNBQVVBLEdBQVZBLFVBQVdBLEVBQUVBO1FBRVpLLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLHFEQUFxREEsR0FBQ0EsRUFBRUEsQ0FBQ0E7UUFFekVBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBO0lBQzNCQSxDQUFDQTtJQXlCRkwscUJBQUNBO0FBQURBLENBakZBLEFBaUZDQSxJQUFBO0FBakZZLHNCQUFjLGlCQWlGMUIsQ0FBQSIsImZpbGUiOiJzZXJ2aWNlcy9oZWFydGhzdG9uZUFwaS5qcyIsInNvdXJjZXNDb250ZW50IjpbImRlY2xhcmUgdmFyIGZldGNoLCBab25lO1xuXG5leHBvcnQgY2xhc3MgSGVhcnRoc3RvbmVBcGl7XG5cblx0ZmluZENhcmQ6IFN0cmluZztcblx0ZmluZERlY2s6IFN0cmluZztcblxuXHQvL1NlcnZpY2Vcblx0c2VydmljZUNhbGwoKXtcblx0XHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHQgICAgIFx0XHRmZXRjaCh0aGlzLmZpbmRDYXJkLCB7XG5cdFx0XHQgICAgICBcdFx0aGVhZGVyczp7XG5cdFx0XHQgICAgICBcdFx0XHRcIlgtTWFzaGFwZS1LZXlcIjogXCJvak9USWdKd0FHbXNoUktBbDlNVDRidDk0bkdycDFCbFVqNWpzbmxZUjVORG1OMkc2cVwiXG5cdFx0XHQgICAgICBcdFx0fVxuXHRcdCBcdCBcdFx0fSlcblx0XHQgICAgICBcdFx0LnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuXHRcdCAgICAgIFx0XHQudGhlbihyZXNwb25zZSA9PiB7XG5cdFx0ICAgICAgICBcdFx0cmVzb2x2ZShyZXNwb25zZSk7IC8vIHJlc29sdmUgcHJvbWlzZSB3aXRoIHJlc3BvbnNlIGlmIGl0IGZldGNoIHN1Y2NlZGVkXG5cdFx0ICAgICAgXHRcdH0pLmNhdGNoKCgpID0+IHtcblx0XHQgICAgICAgIFx0XHRyZWplY3QoKTsgLy8gcmVqZWN0IHByb21pc2UgaWYgd2UgY2F0Y2ggYSBmZXRjaCBlcnJvclxuXHRcdCAgICAgXHRcdH0pO1xuXHRcdCAgICBcdH0pO1xuXHRcdFx0fVxuXG5cdC8vU2VhcmNoIGEgQ2FyZCBieSBOYW1lXG5cdHNlYXJjaENhcmQoY2FyZClcblx0e1xuXHRcdHRoaXMuZmluZENhcmQgPSBcImh0dHBzOi8vb21ndmFtcC1oZWFydGhzdG9uZS12MS5wLm1hc2hhcGUuY29tL2NhcmRzL3NlYXJjaC9cIitjYXJkO1xuXG5cdFx0cmV0dXJuIHRoaXMuc2VydmljZUNhbGwoKTtcblx0fVxuXG5cdC8vU2VhcmNoIGEgY2FyZCBieSBjb3N0LCBhdHRhY2ssIGhlYWx0aFxuXHRzZWFyY2hTcGVjKGNvc3QgPSAwLCBhdHRhY2sgPSAwLCBoZWFsdGggPSAwKVxuXHR7XG5cdFx0dGhpcy5maW5kQ2FyZCA9IFwiaHR0cHM6Ly9vbWd2YW1wLWhlYXJ0aHN0b25lLXYxLnAubWFzaGFwZS5jb20vY2FyZHM/XCI7XG5cdFx0aWYoYXR0YWNrICE9IDApXG5cdFx0e1xuXHRcdFx0dGhpcy5maW5kQ2FyZCA9IHRoaXMuZmluZENhcmQrXCImYXR0YWNrPVwiK2F0dGFjaztcblx0XHR9XG5cdFx0aWYoY29zdCAhPSAwKVxuXHRcdHtcblx0XHRcdHRoaXMuZmluZENhcmQgPSB0aGlzLmZpbmRDYXJkK1wiJmNvc3Q9XCIrY29zdDtcblx0XHR9XG5cdFx0aWYoaGVhbHRoICE9IDApXG5cdFx0e1xuXHRcdFx0dGhpcy5maW5kQ2FyZCA9IHRoaXMuZmluZENhcmQrXCImaGVhbHRoPVwiK2hlYWx0aDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5zZXJ2aWNlQ2FsbCgpO1xuXHR9XG5cblx0Ly9TZWFyY2ggYSBjYXJkIGJ5IElEXG5cdHNlYXJjaEJ5SUQoaWQpXG5cdHtcblx0XHR0aGlzLmZpbmRDYXJkID0gXCJodHRwczovL29tZ3ZhbXAtaGVhcnRoc3RvbmUtdjEucC5tYXNoYXBlLmNvbS9jYXJkcy9cIitpZDtcblxuXHRcdHJldHVybiB0aGlzLnNlcnZpY2VDYWxsKCk7XG5cdH1cblxuXHQvLyBSYW5kb21TZXQoaGVyb2ljQ2xhc3Mpe1xuXG5cblx0Ly8gXHRmaW5kRGVjayA9IFwiaHR0cHM6Ly9vbWd2YW1wLWhlYXJ0aHN0b25lLXYxLnAubWFzaGFwZS5jb20vY2FyZHMvY2xhc3Nlcy9cIit7aGVyb2ljQ2xhc3N9O1xuXHQvLyBcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gLy8gICAgIFx0XHRmZXRjaChmaW5kRGVjaywge1xuXHQvLyAgICAgICBcdFx0aGVhZGVyczp7XG5cdC8vICAgICAgIFx0XHRcdFwiWC1NYXNoYXBlLUtleVwiOiBcIm9qT1RJZ0p3QUdtc2hSS0FsOU1UNGJ0OTRuR3JwMUJsVWo1anNubFlSNU5EbU4yRzZxXCJcblx0Ly8gICAgICAgXHRcdH1cbiAvLyBcdCBcdFx0fSlcbiAvLyAgICAgIFx0XHQudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gLy8gICAgICBcdFx0LnRoZW4ocmVzcG9uc2UgPT4ge1xuIC8vICAgICAgICBcdFx0cmVzb2x2ZShyZXNwb25zZSk7IC8vIHJlc29sdmUgcHJvbWlzZSB3aXRoIHJlc3BvbnNlIGlmIGl0IGZldGNoIHN1Y2NlZGVkXG4gLy8gICAgICAgIFx0XHRjb25zb2xlLmxvZygnZnJvbSBiYWNrJytyZXNwb25zZSk7XG4gLy8gICAgICAgIFx0XHRjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gLy8gICAgICBcdFx0fSkuY2F0Y2goKCkgPT4ge1xuIC8vICAgICAgICBcdFx0cmVqZWN0KCk7IC8vIHJlamVjdCBwcm9taXNlIGlmIHdlIGNhdGNoIGEgZmV0Y2ggZXJyb3JcbiAvLyAgICAgXHRcdH0pO1xuIC8vICAgIFx0fSk7XG5cblxuXHQvLyB9XG5cbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=