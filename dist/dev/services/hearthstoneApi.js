var HearthstoneApi = (function () {
    function HearthstoneApi() {
    }
    HearthstoneApi.prototype.searchCard = function (card) {
        var _this = this;
        this.findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards/search/" + card;
        return new Promise(function (resolve, reject) {
            Zone.bindPromiseFn(fetch)(_this.findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    HearthstoneApi.prototype.searchSpec = function (cost, attack, health) {
        var _this = this;
        if (cost === void 0) { cost = 0; }
        if (attack === void 0) { attack = 0; }
        if (health === void 0) { health = 0; }
        this.findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards?";
        if (attack != 0) {
            this.findCard = this.findCard + "&attack=" + attack;
        }
        if (cost != 0) {
            this.findCard = this.findCard + "&cost=" + cost;
        }
        if (health != 0) {
            this.findCard = this.findCard + "&health=" + health;
        }
        return new Promise(function (resolve, reject) {
            Zone.bindPromiseFn(fetch)(_this.findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    HearthstoneApi.prototype.searchByID = function (id) {
        var _this = this;
        this.findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards/" + id;
        return new Promise(function (resolve, reject) {
            Zone.bindPromiseFn(fetch)(_this.findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    return HearthstoneApi;
})();
exports.HearthstoneApi = HearthstoneApi;

//# sourceMappingURL=data:application/json;base64,