var HearthstoneApi = (function () {
    function HearthstoneApi() {
    }
    HearthstoneApi.prototype.searchCard = function (card) {
        findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards/search/" + card;
        return new Promise(function (resolve, reject) {
            fetch(findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    HearthstoneApi.prototype.searchSpec = function (cost) {
        findCard = "https://omgvamp-hearthstone-v1.p.mashape.com/cards?cost=" + cost;
        return new Promise(function (resolve, reject) {
            fetch(findCard, {
                headers: {
                    "X-Mashape-Key": "ojOTIgJwAGmshRKAl9MT4bt94nGrp1BlUj5jsnlYR5NDmN2G6q"
                }
            })
                .then(function (response) { return response.json(); })
                .then(function (response) {
                resolve(response);
            }).catch(function () {
                reject();
            });
        });
    };
    return HearthstoneApi;
})();
exports.HearthstoneApi = HearthstoneApi;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZpY2VzL2hlYXJ0aHN0b25lQXBpLnRzIl0sIm5hbWVzIjpbIkhlYXJ0aHN0b25lQXBpIiwiSGVhcnRoc3RvbmVBcGkuY29uc3RydWN0b3IiLCJIZWFydGhzdG9uZUFwaS5zZWFyY2hDYXJkIiwiSGVhcnRoc3RvbmVBcGkuc2VhcmNoU3BlYyJdLCJtYXBwaW5ncyI6IkFBQUE7SUFBQUE7SUFpRUFDLENBQUNBO0lBNURBRCxtQ0FBVUEsR0FBVkEsVUFBV0EsSUFBSUE7UUFFZEUsUUFBUUEsR0FBR0EsNERBQTREQSxHQUFDQSxJQUFJQSxDQUFDQTtRQUM1RUEsTUFBTUEsQ0FBQ0EsSUFBSUEsT0FBT0EsQ0FBQ0EsVUFBQ0EsT0FBT0EsRUFBRUEsTUFBTUE7WUFDL0JBLEtBQUtBLENBQUNBLFFBQVFBLEVBQUVBO2dCQUNkQSxPQUFPQSxFQUFDQTtvQkFDUEEsZUFBZUEsRUFBRUEsb0RBQW9EQTtpQkFDckVBO2FBQ0pBLENBQUNBO2lCQUNFQSxJQUFJQSxDQUFDQSxVQUFBQSxRQUFRQSxJQUFJQSxPQUFBQSxRQUFRQSxDQUFDQSxJQUFJQSxFQUFFQSxFQUFmQSxDQUFlQSxDQUFDQTtpQkFDakNBLElBQUlBLENBQUNBLFVBQUFBLFFBQVFBO2dCQUNaQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUNwQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7Z0JBQ1BBLE1BQU1BLEVBQUVBLENBQUNBO1lBQ1pBLENBQUNBLENBQUNBLENBQUNBO1FBQ0xBLENBQUNBLENBQUNBLENBQUNBO0lBQ1BBLENBQUNBO0lBRURGLG1DQUFVQSxHQUFWQSxVQUFXQSxJQUFJQTtRQUVkRyxRQUFRQSxHQUFHQSwwREFBMERBLEdBQUNBLElBQUlBLENBQUNBO1FBQzFFQSxNQUFNQSxDQUFDQSxJQUFJQSxPQUFPQSxDQUFDQSxVQUFDQSxPQUFPQSxFQUFFQSxNQUFNQTtZQUMvQkEsS0FBS0EsQ0FBQ0EsUUFBUUEsRUFBRUE7Z0JBQ2RBLE9BQU9BLEVBQUNBO29CQUNQQSxlQUFlQSxFQUFFQSxvREFBb0RBO2lCQUNyRUE7YUFDSkEsQ0FBQ0E7aUJBQ0VBLElBQUlBLENBQUNBLFVBQUFBLFFBQVFBLElBQUlBLE9BQUFBLFFBQVFBLENBQUNBLElBQUlBLEVBQUVBLEVBQWZBLENBQWVBLENBQUNBO2lCQUNqQ0EsSUFBSUEsQ0FBQ0EsVUFBQUEsUUFBUUE7Z0JBQ1pBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQ3BCQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxDQUFDQTtnQkFDUEEsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFDWkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDTEEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFFUEEsQ0FBQ0E7SUF5QkZILHFCQUFDQTtBQUFEQSxDQWpFQSxBQWlFQ0EsSUFBQTtBQWpFWSxzQkFBYyxpQkFpRTFCLENBQUEiLCJmaWxlIjoic2VydmljZXMvaGVhcnRoc3RvbmVBcGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgSGVhcnRoc3RvbmVBcGkge1xuXG5cdGZpbmRDYXJkOiBTdHJpbmc7XG5cdGZpbmREZWNrOiBTdHJpbmc7XG5cblx0c2VhcmNoQ2FyZChjYXJkKXtcblxuXHRcdGZpbmRDYXJkID0gXCJodHRwczovL29tZ3ZhbXAtaGVhcnRoc3RvbmUtdjEucC5tYXNoYXBlLmNvbS9jYXJkcy9zZWFyY2gvXCIrY2FyZDtcblx0IFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgXHRcdGZldGNoKGZpbmRDYXJkLCB7XG5cdCAgICAgIFx0XHRoZWFkZXJzOntcblx0ICAgICAgXHRcdFx0XCJYLU1hc2hhcGUtS2V5XCI6IFwib2pPVElnSndBR21zaFJLQWw5TVQ0YnQ5NG5HcnAxQmxVajVqc25sWVI1TkRtTjJHNnFcIlxuXHQgICAgICBcdFx0fVxuIFx0IFx0XHR9KVxuICAgICAgXHRcdC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIFx0XHQudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIFx0XHRyZXNvbHZlKHJlc3BvbnNlKTsgLy8gcmVzb2x2ZSBwcm9taXNlIHdpdGggcmVzcG9uc2UgaWYgaXQgZmV0Y2ggc3VjY2VkZWRcbiAgICAgIFx0XHR9KS5jYXRjaCgoKSA9PiB7XG4gICAgICAgIFx0XHRyZWplY3QoKTsgLy8gcmVqZWN0IHByb21pc2UgaWYgd2UgY2F0Y2ggYSBmZXRjaCBlcnJvclxuICAgICBcdFx0fSk7XG4gICAgXHR9KTtcblx0fVxuXG5cdHNlYXJjaFNwZWMoY29zdCl7XG5cblx0XHRmaW5kQ2FyZCA9IFwiaHR0cHM6Ly9vbWd2YW1wLWhlYXJ0aHN0b25lLXYxLnAubWFzaGFwZS5jb20vY2FyZHM/Y29zdD1cIitjb3N0O1xuXHQgXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICBcdFx0ZmV0Y2goZmluZENhcmQsIHtcblx0ICAgICAgXHRcdGhlYWRlcnM6e1xuXHQgICAgICBcdFx0XHRcIlgtTWFzaGFwZS1LZXlcIjogXCJvak9USWdKd0FHbXNoUktBbDlNVDRidDk0bkdycDFCbFVqNWpzbmxZUjVORG1OMkc2cVwiXG5cdCAgICAgIFx0XHR9XG4gXHQgXHRcdH0pXG4gICAgICBcdFx0LnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgXHRcdC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgXHRcdHJlc29sdmUocmVzcG9uc2UpOyAvLyByZXNvbHZlIHByb21pc2Ugd2l0aCByZXNwb25zZSBpZiBpdCBmZXRjaCBzdWNjZWRlZFxuICAgICAgXHRcdH0pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgXHRcdHJlamVjdCgpOyAvLyByZWplY3QgcHJvbWlzZSBpZiB3ZSBjYXRjaCBhIGZldGNoIGVycm9yXG4gICAgIFx0XHR9KTtcbiAgICBcdH0pO1xuXHRcdFxuXHR9XG5cblx0Ly8gUmFuZG9tU2V0KGhlcm9pY0NsYXNzKXtcblxuXG5cdC8vIFx0ZmluZERlY2sgPSBcImh0dHBzOi8vb21ndmFtcC1oZWFydGhzdG9uZS12MS5wLm1hc2hhcGUuY29tL2NhcmRzL2NsYXNzZXMvXCIre2hlcm9pY0NsYXNzfTtcblx0Ly8gXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuIC8vICAgICBcdFx0ZmV0Y2goZmluZERlY2ssIHtcblx0Ly8gICAgICAgXHRcdGhlYWRlcnM6e1xuXHQvLyAgICAgICBcdFx0XHRcIlgtTWFzaGFwZS1LZXlcIjogXCJvak9USWdKd0FHbXNoUktBbDlNVDRidDk0bkdycDFCbFVqNWpzbmxZUjVORG1OMkc2cVwiXG5cdC8vICAgICAgIFx0XHR9XG4gLy8gXHQgXHRcdH0pXG4gLy8gICAgICBcdFx0LnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuIC8vICAgICAgXHRcdC50aGVuKHJlc3BvbnNlID0+IHtcbiAvLyAgICAgICAgXHRcdHJlc29sdmUocmVzcG9uc2UpOyAvLyByZXNvbHZlIHByb21pc2Ugd2l0aCByZXNwb25zZSBpZiBpdCBmZXRjaCBzdWNjZWRlZFxuIC8vICAgICAgICBcdFx0Y29uc29sZS5sb2coJ2Zyb20gYmFjaycrcmVzcG9uc2UpO1xuIC8vICAgICAgICBcdFx0Y29uc29sZS5sb2cocmVzcG9uc2UpO1xuIC8vICAgICAgXHRcdH0pLmNhdGNoKCgpID0+IHtcbiAvLyAgICAgICAgXHRcdHJlamVjdCgpOyAvLyByZWplY3QgcHJvbWlzZSBpZiB3ZSBjYXRjaCBhIGZldGNoIGVycm9yXG4gLy8gICAgIFx0XHR9KTtcbiAvLyAgICBcdH0pO1xuXG5cblx0Ly8gfVxuXG59Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9