if (typeof __decorate !== "function") __decorate = function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
if (typeof __metadata !== "function") __metadata = function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var hearthstoneApi_1 = require('services/hearthstoneApi');
var DeckServices_1 = require('services/DeckServices');
var storageService_1 = require('services/storageService');
var Search = (function () {
    function Search(hearthstoneApi, deckService, storageService) {
        var b = new angular2_1.FormBuilder();
        this.searchForm = b.group({
            card: ["", angular2_1.Validators.required]
        });
        this.searchSpec = b.group({
            mana: [""],
            attack: [""],
            health: [""]
        });
        this.hearthstoneApi = hearthstoneApi;
        this.storageService = storageService;
        this.deck = JSON.parse(this.storageService.loadJson('deck'));
    }
    Search.prototype.onSearch = function (e) {
        var _this = this;
        e.preventDefault();
        if (this.searchForm.valid) {
            this.hearthstoneApi.searchCard(this.searchForm.value.card).then(function (response) {
                _this.datas = response;
            }, function (response) {
                console.log("loading failed");
            });
        }
        else {
            console.error("invalid form", this.searchForm);
        }
    };
    Search.prototype.onSpec = function (e) {
        var _this = this;
        e.preventDefault();
        if (this.searchSpec.valid) {
            this.hearthstoneApi.searchSpec(this.searchSpec.value.mana, this.searchSpec.value.attack, this.searchSpec.value.health).then(function (response) {
                var arrays = new Array();
                for (var prop in response) {
                    for (var i = response[prop].length - 1; i >= 0; i--) {
                        arrays.push(response[prop][i]);
                    }
                    ;
                }
                _this.datas = arrays;
            }, function (response) {
                console.log("loading failed");
            });
        }
        else {
            console.error("invalid form", this.searchSpec);
        }
    };
    Search.prototype.save = function (img) {
        this.deck.push(img);
        this.storageService.saveJson('deck', JSON.stringify(this.deck));
    };
    Search = __decorate([
        angular2_1.Component({
            selector: 'search',
            appInjector: [hearthstoneApi_1.HearthstoneApi, DeckServices_1.DeckServices, storageService_1.StorageService]
        }),
        angular2_1.View({
            directives: [angular2_1.formDirectives, angular2_1.NgFor],
            templateUrl: './components/search/search.html'
        }), 
        __metadata('design:paramtypes', [hearthstoneApi_1.HearthstoneApi, DeckServices_1.DeckServices, storageService_1.StorageService])
    ], Search);
    return Search;
})();
exports.Search = Search;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvc2VhcmNoL3NlYXJjaC50cyJdLCJuYW1lcyI6WyJTZWFyY2giLCJTZWFyY2guY29uc3RydWN0b3IiLCJTZWFyY2gub25TZWFyY2giLCJTZWFyY2gub25TcGVjIiwiU2VhcmNoLnNhdmUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUEseUJBQXVHLG1CQUFtQixDQUFDLENBQUE7QUFDM0gsK0JBQTZCLHlCQUM3QixDQUFDLENBRHFEO0FBQ3RELDZCQUFpQyx1QkFBdUIsQ0FBQyxDQUFBO0FBQ3pELCtCQUE2Qix5QkFBeUIsQ0FBQyxDQUFBO0FBRXZEO0lBbUJDQSxnQkFBWUEsY0FBOEJBLEVBQUVBLFdBQXlCQSxFQUFFQSxjQUE4QkE7UUFDcEdDLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLHNCQUFXQSxFQUFFQSxDQUFBQTtRQUV6QkEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDcEJBLElBQUlBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLHFCQUFVQSxDQUFDQSxRQUFRQSxDQUFDQTtTQUNqQ0EsQ0FBQ0EsQ0FBQ0E7UUFFSEEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDdkJBLElBQUlBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO1lBQ1ZBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO1lBQ1pBLE1BQU1BLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO1NBQ2RBLENBQUNBLENBQUNBO1FBRU5BLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLGNBQWNBLENBQUNBO1FBQ2xDQSxJQUFJQSxDQUFDQSxjQUFjQSxHQUFHQSxjQUFjQSxDQUFDQTtRQUdyQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0Es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QUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO0lBQ2pFQSxDQUFDQTtJQWpGRko7UUFBQ0Esb0JBQVNBLENBQUNBO1lBQ1ZBLFFBQVFBLEVBQUVBLFFBQVFBO1lBQ2xCQSxXQUFXQSxFQUFDQSxDQUFDQSwrQkFBY0EsRUFBRUEsMkJBQVlBLEVBQUVBLCtCQUFjQSxDQUFDQTtTQUMxREEsQ0FBQ0E7UUFDREEsZUFBSUEsQ0FBQ0E7WUFDTEEsVUFBVUEsRUFBRUEsQ0FBQ0EseUJBQWNBLEVBQUVBLGdCQUFLQSxDQUFDQTtZQUNqQ0EsV0FBV0EsRUFBRUEsaUNBQWlDQTtTQUNoREEsQ0FBQ0E7O2VBMkVEQTtJQUFEQSxhQUFDQTtBQUFEQSxDQWxGQSxBQWtGQ0EsSUFBQTtBQXpFWSxjQUFNLFNBeUVsQixDQUFBIiwiZmlsZSI6ImNvbXBvbmVudHMvc2VhcmNoL3NlYXJjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBWaWV3LCBib290c3RyYXAsIEZvcm1CdWlsZGVyLCBWYWxpZGF0b3JzLCBmb3JtRGlyZWN0aXZlcywgQ29udHJvbEdyb3VwLCBOZ0Zvcn0gZnJvbSAnYW5ndWxhcjIvYW5ndWxhcjInO1xuaW1wb3J0IHtIZWFydGhzdG9uZUFwaX0gZnJvbSAnc2VydmljZXMvaGVhcnRoc3RvbmVBcGknXG5pbXBvcnQge0RlY2tTZXJ2aWNlcywgQ2FyZH0gZnJvbSAnc2VydmljZXMvRGVja1NlcnZpY2VzJztcbmltcG9ydCB7U3RvcmFnZVNlcnZpY2V9IGZyb20gJ3NlcnZpY2VzL3N0b3JhZ2VTZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnc2VhcmNoJyxcblx0YXBwSW5qZWN0b3I6W0hlYXJ0aHN0b25lQXBpLCBEZWNrU2VydmljZXMsIFN0b3JhZ2VTZXJ2aWNlXVxufSlcbkBWaWV3KHtcblx0ZGlyZWN0aXZlczogW2Zvcm1EaXJlY3RpdmVzLCBOZ0Zvcl0sXG4gIFx0dGVtcGxhdGVVcmw6ICcuL2NvbXBvbmVudHMvc2VhcmNoL3NlYXJjaC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIFNlYXJjaHtcblx0c2VhcmNoRm9ybTogQ29udHJvbEdyb3VwO1xuXHRzZWFyY2hTcGVjOiBDb250cm9sR3JvdXA7XG5cdGhlYXJ0aHN0b25lQXBpOiBIZWFydGhzdG9uZUFwaTtcblx0ZGVja1NlcnZpY2U6IERlY2tTZXJ2aWNlcztcblx0c3RvcmFnZVNlcnZpY2U6IFN0b3JhZ2VTZXJ2aWNlO1xuXHRkYXRhczogT2JqZWN0O1xuXHRkZWNrOiBBcnJheTxTdHJpbmc+O1xuXG5cdFxuXHRjb25zdHJ1Y3RvcihoZWFydGhzdG9uZUFwaTogSGVhcnRoc3RvbmVBcGksIGRlY2tTZXJ2aWNlOiBEZWNrU2VydmljZXMsIHN0b3JhZ2VTZXJ2aWNlOiBTdG9yYWdlU2VydmljZSkge1xuXHRcdHZhciBiID0gbmV3IEZvcm1CdWlsZGVyKClcblxuXHRcdHRoaXMuc2VhcmNoRm9ybSA9IGIuZ3JvdXAoe1xuXHQgICAgICBcdGNhcmQ6IFtcIlwiLCBWYWxpZGF0b3JzLnJlcXVpcmVkXVxuXHQgICAgfSk7XG5cblx0ICAgIHRoaXMuc2VhcmNoU3BlYyA9IGIuZ3JvdXAoe1xuXHQgICAgICBcdG1hbmE6IFtcIlwiXSxcbiAgICAgIFx0XHRhdHRhY2s6IFtcIlwiXSxcbiAgICAgIFx0XHRoZWFsdGg6IFtcIlwiXVxuXHQgICAgfSk7XG5cblx0XHR0aGlzLmhlYXJ0aHN0b25lQXBpID0gaGVhcnRoc3RvbmVBcGk7XG5cdCAgICB0aGlzLnN0b3JhZ2VTZXJ2aWNlID0gc3RvcmFnZVNlcnZpY2U7XG5cdCAgICBcblx0ICAgIC8vIEluaXRpYWxpemUgZGVjayB3aXRoIGxvY2FsIHN0b3JhZ2Vcblx0ICAgIHRoaXMuZGVjayA9IEpTT04ucGFyc2UodGhpcy5zdG9yYWdlU2VydmljZS5sb2FkSnNvbignZGVjaycpKTtcblxuXHR9XG5cblx0b25TZWFyY2goZSl7XG5cblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0aWYodGhpcy5zZWFyY2hGb3JtLnZhbGlkKSB7IC8vIHJldHVybiB0cnVlIG9yIGZhbHNlLCBkZXBlbmRpbmcgb24gdGhlIGZvcm0gc3RhdGVcblx0XHRcdC8vU2VhcmNoIGNhcmQgb24gc3VibWl0XG5cdFx0XHR0aGlzLmhlYXJ0aHN0b25lQXBpLnNlYXJjaENhcmQodGhpcy5zZWFyY2hGb3JtLnZhbHVlLmNhcmQpLnRoZW4ocmVzcG9uc2UgPT4ge1xuXHRcdCAgICBcdHRoaXMuZGF0YXMgPSByZXNwb25zZTtcblx0XHQgICAgfSwgcmVzcG9uc2UgPT4ge1xuXHRcdCAgICBcdGNvbnNvbGUubG9nKFwibG9hZGluZyBmYWlsZWRcIik7IC8vIFRoaXMgc2Vjb25kIGZ1bmN0aW9uIGlzIGNhbGxlZCBpZiBwcm9taXNlIGlzIHJlamVjdGVkXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcImludmFsaWQgZm9ybVwiLCB0aGlzLnNlYXJjaEZvcm0pO1xuXHRcdH1cblxuXHR9XG5cblx0b25TcGVjKGUpe1xuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGlmKHRoaXMuc2VhcmNoU3BlYy52YWxpZCkgeyAvLyByZXR1cm4gdHJ1ZSBvciBmYWxzZSwgZGVwZW5kaW5nIG9uIHRoZSBmb3JtIHN0YXRlXG5cdFx0XHQvL1NlYXJjaCBjYXJkIG9uIHN1Ym1pdFxuXHRcdFx0dGhpcy5oZWFydGhzdG9uZUFwaS5zZWFyY2hTcGVjKHRoaXMuc2VhcmNoU3BlYy52YWx1ZS5tYW5hLCB0aGlzLnNlYXJjaFNwZWMudmFsdWUuYXR0YWNrLCB0aGlzLnNlYXJjaFNwZWMudmFsdWUuaGVhbHRoKS50aGVuKHJlc3BvbnNlID0+IHtcblx0XHRcdFx0dmFyIGFycmF5cyA9IG5ldyBBcnJheSgpO1xuXHRcdFx0XHRmb3IgKHZhciBwcm9wIGluIHJlc3BvbnNlKXtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gcmVzcG9uc2VbcHJvcF0ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0XHRcdGFycmF5cy5wdXNoKHJlc3BvbnNlW3Byb3BdW2ldKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0ICAgIFx0dGhpcy5kYXRhcyA9IGFycmF5cztcblx0XHQgICAgfSwgcmVzcG9uc2UgPT4ge1xuXHRcdCAgICBcdGNvbnNvbGUubG9nKFwibG9hZGluZyBmYWlsZWRcIik7IC8vIFRoaXMgc2Vjb25kIGZ1bmN0aW9uIGlzIGNhbGxlZCBpZiBwcm9taXNlIGlzIHJlamVjdGVkXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS5lcnJvcihcImludmFsaWQgZm9ybVwiLCB0aGlzLnNlYXJjaFNwZWMpO1xuXHRcdH1cblx0XG5cdH1cblxuXHRzYXZlKGltZyl7XG5cdFx0dGhpcy5kZWNrLnB1c2goaW1nKTtcblx0XHR0aGlzLnN0b3JhZ2VTZXJ2aWNlLnNhdmVKc29uKCdkZWNrJywgSlNPTi5zdHJpbmdpZnkodGhpcy5kZWNrKSk7XG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==